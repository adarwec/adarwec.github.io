const express = require("express");
const fs = require("fs");
const httpProxy = require("http-proxy");
const path = require("path");

module.exports = class {
  constructor(options) {
    this.proxyPath = options.proxyPath;
    this.staticDir = options.staticDir;
    this.apiBaseUrl = options.apiBaseUrl;
    this.port = options.port;
    this.proxy = httpProxy.createProxyServer({ changeOrigin: true });
  }

  _proxyCacheInvalidator() {
    const self = this;
    fs.watch(path.dirname(self.proxyPath), (event, filename) => {
      if (filename == path.basename(self.proxyPath)) {
        delete require.cache[require.resolve(self.proxyPath)];
      }
    });
  }

  _lookupEndpoint(pathParams) {
    const proxyConfig = require(this.proxyPath);
    if (pathParams.length === 1) {
      return proxyConfig["/" + pathParams];
    }

    let proxyKeyLookupPaths = Object.keys(proxyConfig)
      .map(key => key.split("/").filter(path => path.length > 0))
      .filter(
        keyPaths =>
          keyPaths[0] === pathParams[0] && keyPaths.length === pathParams.length
      );

    if (proxyKeyLookupPaths.length) {
      let proxyKey = "/" + proxyKeyLookupPaths[0].join("/");
      return proxyConfig[proxyKey];
    }

    return undefined;
  }

  _invokeProxyHandler(req, res) {
    let splitPath = req.url.split("?");
    let paths = splitPath[0];
    let queryParams = splitPath[1];

    let pathParams = paths.split("/").filter(path => path.length > 0);

    let endPoint = this._lookupEndpoint(pathParams);

    if (
      endPoint.indexOf("https://") != -1 ||
      endPoint.indexOf("http://") != -1
    ) {
      if (endPoint.indexOf("{") != -1) {
        endPoint =
          endPoint.substring(0, endPoint.indexOf("{")) +
          pathParams.slice(1).join("/");
      }
      if (queryParams) {
        endPoint += "?" + queryParams;
      }
      this.proxy.web(req, res, { target: endPoint, ignorePath: true });
    } else {
      const modPath = `${path.dirname(this.proxyPath)}/${endPoint}`;
      const localHandler = require(modPath);
      delete require.cache[require.resolve(modPath)];
      localHandler(req, res);
    }
  }

  run() {
    const self = this;
    const app = express();
    app.use(express.static(self.staticDir));

    app.use(self.apiBaseUrl, (req, res) => {
      self._invokeProxyHandler(req, res);
    });

    self._proxyCacheInvalidator();

    const port = process.env.PORT || self.port;

    const listener = app.listen(port, function() {
      console.log(`Proxy Server running on ${listener.address().port}`);
    });

    return listener;
  }
};
