#!/usr/bin/env node

const aws = require("aws-sdk");
const execSync = require("child_process").execSync;
const fs = require("fs");
const path = require("path");
const s3 = new aws.S3();
const cloudFront = new aws.CloudFront();

const appCode = process.env.npm_package_appCode;
if (!appCode) {
  console.log("Error: application code is required");
  process.exit(-1);
}

const appBucketName = process.argv[2];
if (!appBucketName) {
  console.log("Error: bucket name is required");
  process.exit(-1);
}
const deployLog = `deploy.${new Date().getTime()}.log`;
fs.writeFileSync(
  deployLog,
  `Deploying ${appCode} to ${appBucketName} on ${new Date().toString()}\n`,
  "utf-8"
);
const gzipContent = () => {
  return new Promise(function(resolve, reject) {
    execSync(`rm -rf ./dist_gzip`);
    execSync(`cp -rp ./dist ./dist_gzip`);
    execSync(`find ./dist_gzip -type f -exec gzip -9 "{}" \\;`);

    let gzFiles = execSync("find ./dist_gzip -type f")
      .toString()
      .split("\n");
    for (let i = 0; i < gzFiles.length; i++) {
      if (gzFiles[i]) {
        let ext = path.extname(gzFiles[i]);
        let origFilename = gzFiles[i].substring(0, gzFiles[i].indexOf(ext));
        execSync(`mv "${gzFiles[i]}" "${origFilename}"`);
      }
    }

    fs.appendFileSync(deployLog, "Gzipped site content into dist_gzip\n");

    resolve("./dist_gzip");
  });
};

const syncAppBucket = () => {
  return new Promise(function(resolve, reject) {
    fs.appendFileSync(deployLog, `Syncing ./dist_gzip with ${appBucketName}\n`);
    execSync(
      `aws s3 sync ./dist_gzip s3://${appBucketName}/ --content-encoding="gzip" --region ca-central-1 >> ${deployLog}`
    );
    resolve();
  });
};

const invalidateDistribution = async () => {
  var cloudfront = new aws.CloudFront({ apiVersion: "2019-03-26" });
  try {
    let distributions = await cloudfront.listDistributions().promise();

    var distributionItems = distributions.DistributionList.Items;

    const distribution = distributionItems.filter(function(item) {
      return item.Aliases.Items.filter(a => a === appBucketName)[0];
    });
    var distributionId = distribution[0].id;
    var params = {
      DistibutionId: distributionId,
      InvalidationBatch: {
        CallerReference: Date.now().toString(),
        Paths: {
          Quantity: 1,
          Items: ["/*"]
        }
      }
    };

    await cloudfront.createInvalidation(params).promise();
  } catch (error) {
    throw error;
  }
};

const invalidation = process.argv[3];

gzipContent()
  .then(() => {
    return syncAppBucket();
  })
  .then(() => {
    if (invalidation === "invalidate") {
      return invalidateDistribution();
    } else {
      return Promise.resolve();
    }
  })
  .then(() => {
    console.log(`Deloyment complete, see ${deployLog} for details`);
  })
  .catch(err => {
    console.log("Deployment error:", err);
    fs.appendFileSync(deployLog, `Deployment failure: ${JSON.stringify(err)}`);
  });
